// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/echo/echo.proto

package echoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	echo "github.com/Gabo-div/bingo/packages/protobuf/go/proto/echo"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EchoServiceName is the fully-qualified name of the EchoService service.
	EchoServiceName = "echo.EchoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EchoServiceEchoProcedure is the fully-qualified name of the EchoService's Echo RPC.
	EchoServiceEchoProcedure = "/echo.EchoService/Echo"
)

// EchoServiceClient is a client for the echo.EchoService service.
type EchoServiceClient interface {
	Echo(context.Context, *connect.Request[echo.EchoRequest]) (*connect.Response[echo.EchoResponse], error)
}

// NewEchoServiceClient constructs a client for the echo.EchoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EchoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	echoServiceMethods := echo.File_proto_echo_echo_proto.Services().ByName("EchoService").Methods()
	return &echoServiceClient{
		echo: connect.NewClient[echo.EchoRequest, echo.EchoResponse](
			httpClient,
			baseURL+EchoServiceEchoProcedure,
			connect.WithSchema(echoServiceMethods.ByName("Echo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// echoServiceClient implements EchoServiceClient.
type echoServiceClient struct {
	echo *connect.Client[echo.EchoRequest, echo.EchoResponse]
}

// Echo calls echo.EchoService.Echo.
func (c *echoServiceClient) Echo(ctx context.Context, req *connect.Request[echo.EchoRequest]) (*connect.Response[echo.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// EchoServiceHandler is an implementation of the echo.EchoService service.
type EchoServiceHandler interface {
	Echo(context.Context, *connect.Request[echo.EchoRequest]) (*connect.Response[echo.EchoResponse], error)
}

// NewEchoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoServiceHandler(svc EchoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	echoServiceMethods := echo.File_proto_echo_echo_proto.Services().ByName("EchoService").Methods()
	echoServiceEchoHandler := connect.NewUnaryHandler(
		EchoServiceEchoProcedure,
		svc.Echo,
		connect.WithSchema(echoServiceMethods.ByName("Echo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/echo.EchoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EchoServiceEchoProcedure:
			echoServiceEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEchoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoServiceHandler struct{}

func (UnimplementedEchoServiceHandler) Echo(context.Context, *connect.Request[echo.EchoRequest]) (*connect.Response[echo.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("echo.EchoService.Echo is not implemented"))
}
